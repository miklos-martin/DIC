{"google":"UA-35915314-1","body":"This is a cool DIC for node projects, written in coffeescript.\r\n\r\nThe container itself couldn't be more simple, it's based on [twittee](https://github.com/fabpot/twittee \"Twittee\").\r\n\r\nYou can use the container directly, like this:\r\n```coffeescript\r\ndescribe 'DIC', ->\r\n  it ' should set a parameter', ->\r\n    container.set 'key', 'value'\r\n    container.get('key').should.equal 'value'\r\n\r\n  it 'should be capable to register callable services', ->\r\n    container.set 'callable', ->\r\n      -> 'foo'\r\n\r\n    callable = container.get 'callable'\r\n    callable().should.equal 'foo'\r\n\r\n  it 'should allow to inject parameters', ->\r\n    container.set 'usesparam', (c) ->\r\n      return c.get 'key'\r\n\r\n    container.get('usesparam').should.equal 'value'\r\n  \r\n  it 'should inject services as well', ->\r\n    container.set 'usesservice', (c) ->\r\n      -> c.get('callable')()\r\n    \r\n    callable = container.get 'usesservice'\r\n    callable().should.equal 'foo'\r\n```\r\nIt's not so fun to do this way, but parameters and services can also be described in yaml files.\r\n\r\nHere is an example:\r\n```yml\r\n# parameters.yml\r\nparameters:\r\n  param: Value from parameters.yml\r\n  param_two: This is an other value\r\n```\r\n\r\nIf you tell the `compiler` to load this `yml`, it will set those params to the container.\r\n\r\n```coffeescript\r\ndescribe '.compileParameters', ->\r\n    it 'should parse a yaml and set the parameters from it', (done) ->\r\n      yaml = \"path/to/parameters.yml\"\r\n      compiler.load yaml, ->\r\n        container.get('param').should.equal 'Value from parameters.yml'\r\n        container.get('param_two').should.equal 'This is an other value'\r\n        done()\r\n```\r\n\r\nYou can specify services as well. A service can be any module.\r\nThe compiler will check if you gave a path, or a modulename. If a path is given it has to be relative to your project's root directory.\r\n\r\n```yml\r\n# services.yml\r\n\r\nservices:\r\n  foo:\r\n    module: 'test/fixtures/foo'\r\n```\r\n\r\nYou can pass arguments to a service's constructor (if it is a class, of course). The compiler will decide, if the given module needs to be initiated or not.\r\nIt will recognize, if an argument is a parameter if you put it's name between % signs. You can indicate a service with an @ at the beginning - like in [symfony](https://github.com/symfony/symfony \"Symfony 2\"):\r\n```yml\r\n# services.yml\r\n\r\nservices:\r\n  bar:\r\n    module: 'test/fixtures/bar'\r\n    arguments: ['injected', '%param%', '@foo']\r\n```\r\n\r\nYou can also use setter injection:\r\n```yml\r\n# services.yml\r\n\r\nparameters:\r\n  setdata: \"this has been injected by a set* method\"\r\n\r\nservices:\r\n  setter:\r\n    module: \"test/fixtures/setter\"\r\n    calls:\r\n      setData:\r\n        arguments:\r\n          - '%setdata%'\r\n```\r\n\r\nNote, that you can load `yamls` as many times as you want, and it will add and add again to the same container, overriding existing keys.\r\nAlso note, that the container is super-lazy. A service gets initiated the first time it's called.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"DIC","tagline":"Dependency Injection Container"}